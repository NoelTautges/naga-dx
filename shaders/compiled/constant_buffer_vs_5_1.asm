//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Buffer_1
// {
//
//   float4x4 mat;                      // Offset:    0 Size:    64
//   float3 vec;                        // Offset:   64 Size:    12
//   float i;                           // Offset:   76 Size:     4
//
// }
//
// cbuffer Buffer_2
// {
//
//   float4 packed_vec;                 // Offset:    0 Size:    16
//   float packed_float_1;              // Offset:   16 Size:     4
//   float packed_float_2;              // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// Buffer_1                          cbuffer      NA          NA     CB0            cb0      1 
// Buffer_2                          cbuffer      NA          NA     CB1            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
vs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][5], immediateIndexed, space=0
dcl_constantbuffer CB1[2:2][2], immediateIndexed, space=0
dcl_output_siv o0.xyzw, position
dcl_temps 2
add r0.x, CB0[0][0].y, CB0[0][0].x
add r0.y, CB0[0][1].y, CB0[0][1].x
add r0.z, CB0[0][2].y, CB0[0][2].x
add r0.w, CB0[0][3].y, CB0[0][3].x
add r0.x, r0.x, CB0[0][0].z
add r0.y, r0.y, CB0[0][1].z
add r0.z, r0.z, CB0[0][2].z
add r0.w, r0.w, CB0[0][3].z
add r1.x, r0.x, CB0[0][0].w
add r1.y, r0.y, CB0[0][1].w
add r1.z, r0.z, CB0[0][2].w
add r1.w, r0.w, CB0[0][3].w
add r0.xyzw, r1.xyzw, CB0[0][4].xyzw
add r0.xyzw, r0.xyzw, CB1[2][0].xyzw
add o0.xy, r0.xyxx, CB1[2][1].xyxx
mov o0.zw, r0.zzzw
ret 
// Approximately 17 instruction slots used
